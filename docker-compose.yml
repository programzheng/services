version: '3'

services:
  portainer:
    build:
      context: ./portainer
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DATA_PATH_HOST}/portainer_data:/data
    ports: 
      - ${PORTAINER_SERVER_PORT}:8000
      - ${PORTAINER_CLIENT_PORT}:9000
    networks:
      - backend

  nginx:
    build:
      context: ./nginx
    restart: always
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_PROJECTS_PATH}:/var/www
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
    ports:
      - ${NGINX_HOST_HTTP_PORT}:80
      - ${NGINX_HOST_HTTPS_PORT}:443
      # - ${NGINX_HOST_SOCKETIO_PORT}:8000
    networks:
      - backend

  # traefik:
  #     build:
  #         context: ./traefik
  #     restart: always
  #     ports:
  #         - "80:80"
  #         - "443:443"
  #     volumes:
  #         - /var/run/docker.sock:/var/run/docker.sock
  #         - ./traefik/traefik.toml:/traefik.toml
  #     labels:
  #         - "traefik.docker.network=web"
  #         - "traefik.enable=true"
  #         - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
  #     networks:
  #         - backend

  #mysql
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_VERSION=${MYSQL_VERSION}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_ENTRYPOINT_INITDB=${MYSQL_ENTRYPOINT_INITDB}
      - TZ=${TZ}
    networks:
      - backend

  #adminer
  adminer:
    build: ./adminer
    ports:
      - ${ADMIMER_PORT}:8080
    environment:
      - ADMINER_DEFAULT_SERVER=${ADMINER_DEFAULT_SERVER}
    networks:
      - backend

  #minio
  minio:
    build: ./minio
    volumes:
      - ${DATA_PATH_HOST}/minio:/data
    #   - ${CONFIG_PATH_HOST}/minio:/root/.minio
    ports:
      - "${MINIO_PORT}:9000"
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    command: server /data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - backend

  #ngrok
  ngrok:
    build:
      context: ./ngrok
    ports:
      - "${NGROK_PORT}:4040"
    environment:
      - NGROK_AUTH=${NGROK_AUTHTOKEN}
      - NGROK_PROTOCOL=http
      - NGROK_REGION=ap
      - NGROK_PORT=nginx:80
    depends_on:
      - nginx
    networks:
      - backend

networks:
  backend:
    external: true
